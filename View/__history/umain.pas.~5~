unit umain;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Buttons, Vcl.ExtCtrls, ucadastropadrao,
  System.ImageList, Vcl.ImgList, Vcl.ComCtrls, ucadproduto;

type
  TFrmMain = class(TForm)
    PnlFundo: TPanel;
    PnlLateral: TPanel;
    BtnSair: TSpeedButton;
    BtnRelatorios: TSpeedButton;
    BtnVendas: TSpeedButton;
    BtnProdutos: TSpeedButton;
    BtnClientes: TSpeedButton;
    BtnMenu: TSpeedButton;
    PnlBarra: TPanel;
    ImageList: TImageList;
    TabControlMain: TTabControl;
    procedure BtnMenuClick(Sender: TObject);
    procedure BtnSairClick(Sender: TObject);
    procedure PnlLateralMouseEnter(Sender: TObject);
    procedure PnlLateralMouseLeave(Sender: TObject);
    function MouseStillOverPanel: Boolean;
    procedure FormShow(Sender: TObject);
    procedure BtnClientesClick(Sender: TObject);
    procedure BtnProdutosClick(Sender: TObject);
  private
    procedure ExpandirMenu;
    procedure ContrairMenu;
    procedure OpenTab(const AFormClass: TFormClass; const ATabName: string);

  public
    { Public declarations }
  end;

var
  FrmMain: TFrmMain;
  BExpandido: Boolean;

implementation

{$R *.dfm}

procedure TFrmMain.BtnClientesClick(Sender: TObject);
begin
  ContrairMenu();

  {if not Assigned(FrmCadastroPadrao) then
    FrmCadastroPadrao := TFrmCadastroPadrao.Create(Self);

  FrmCadastroPadrao.ShowModal;
  FrmCadastroPadrao.Free;
  FrmCadastroPadrao := nil;}

end;

procedure TFrmMain.BtnMenuClick(Sender: TObject);
begin
  if BExpandido then
    ContrairMenu()
  else
    ExpandirMenu();

  BExpandido := not BExpandido;
end;

procedure TFrmMain.BtnProdutosClick(Sender: TObject);
begin
  ContrairMenu();
  if not Assigned(FrmCadProduto) then
    FrmCadProduto := TFrmCadProduto.Create(Self);

  FrmCadProduto.ShowModal;
  FrmCadProduto.Free;
  FrmCadProduto := nil;
end;

procedure TFrmMain.BtnSairClick(Sender: TObject);
begin
  Close;
end;

procedure TFrmMain.ContrairMenu;
begin
  PnlLateral.Width := 50;
end;

procedure TFrmMain.ExpandirMenu;
begin
  PnlLateral.Width := 137;
end;

procedure TFrmMain.FormShow(Sender: TObject);
begin
  ContrairMenu();
end;

function TFrmMain.MouseStillOverPanel: Boolean;
var
  MousePos: TPoint;
begin
  // Pega a posição atual do mouse
  GetCursorPos(MousePos);
  // Converte para as coordenadas relativas ao formulário
  MousePos := ScreenToClient(MousePos);

  // Verifica se o mouse ainda está sobre o painel lateral
  Result := PtInRect(PnlLateral.BoundsRect, MousePos);

end;

procedure TFrmMain.OpenTab(const AFormClass: TFormClass; const ATabName: string);
var
  TabIndex: Integer;
  NewTab: TTabSheet;
  NewForm: TForm;
begin
  // Verifica se a aba já existe
  TabIndex := TabControl.IndexOf(TabControl.FindComponent(ATabName));

  if TabIndex = -1 then
  begin
    // Se não existe, cria uma nova aba
    NewTab := TTabSheet.Create(TabControl);
    NewTab.PageControl := TabControl;
    NewTab.Caption := ATabName;
    NewTab.Name := ATabName;

    // Cria e mostra o formulário na nova aba
    NewForm := AFormClass.Create(Self);
    NewForm.Parent := NewTab;
    NewForm.Align := alClient; // Ajusta o formulário à aba
    NewForm.Show;

    // Seleciona a nova aba
    TabControl.ActivePage := NewTab;
  end
  else
  begin
    // Se a aba já existe, apenas a ativa
    TabControl.ActivePageIndex := TabIndex;
  end;
begin

end;

procedure TFrmMain.PnlLateralMouseEnter(Sender: TObject);
begin
  ExpandirMenu();
end;

procedure TFrmMain.PnlLateralMouseLeave(Sender: TObject);
begin
  if not BExpandido and not MouseStillOverPanel then
    ContrairMenu();
end;

end.
