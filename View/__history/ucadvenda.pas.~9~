unit ucadvenda;

interface

{$REGION 'Uses'}

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, ucadastropadrao, Data.DB, Vcl.Grids, Vcl.DBGrids, Vcl.StdCtrls,
  Vcl.DBCtrls, Vcl.Buttons, Vcl.ExtCtrls, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, conexao.model, produto.model, produto.controller, cliente.model, cliente.controller,
  venda.model, vendaitens.model, venda.controller, vendaitens.controller, untFormat, upesqvendas;

{$ENDREGION}

type
  TFrmCadVenda = class(TFrmCadastroPadrao)

{$REGION 'Componentes'}
    Label1: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    BtnLimpaCampos: TSpeedButton;
    BtnPesquisar: TSpeedButton;
    EdtCodVenda: TEdit;
    EdtDataVenda: TEdit;
    EdtTotalVenda: TEdit;
    EdtCodCliente: TEdit;
    LcbxNomeCliente: TDBLookupComboBox;
    BtnInserirItens: TButton;
    Label10: TLabel;
    Label12: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    EdtQuantidade: TEdit;
    EdtPrecoUnit: TEdit;
    EdtPrecoTotal: TEdit;
    LCbxProdutos: TDBLookupComboBox;
    BtnAddItemGrid: TButton;
    BtnDelItemGrid: TButton;
    DbGridItensPedido: TDBGrid;
    MTblVendaItem: TFDMemTable;
    MTblVendaItemID_VENDA: TIntegerField;
    MTblVendaItemCOD_VENDA: TIntegerField;
    MTblVendaItemCOD_PRODUTO: TIntegerField;
    MTblVendaItemDES_DESCRICAO: TStringField;
    MTblVendaItemVAL_QUANTIDADE: TIntegerField;
    MTblVendaItemVAL_PRECOUNITARIO: TFloatField;
    MTblVendaItemVAL_TOTALITEM: TFloatField;
    DsVendaItem: TDataSource;
    procedure BtnPesquisarClick(Sender: TObject);
    procedure PnlAlterarClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);

{$ENDREGION}

  private
    TblProdutos: TFDQuery;
    TblClientes: TFDQuery;
    TblVendas: TFDQuery;
    TblVendaItens: TFDQuery;
    QryVendas: TFDQuery;
    QryVendaItens: TFDQuery;
    QryTemp: TFDQuery;
    DsProdutos: TDataSource;
    DsClientes: TDataSource;
    DsVendas: TDataSource;
    TransacaoVendas: TFDTransaction;
    FProduto: TProduto;
    ProdutoController: TProdutoController;
    FCliente: TCliente;
    ClienteController: TClienteController;
    FVenda: TVenda;
    VendaController: TVendaController;
    FVendaItens: TVendaItens;
    VendaItensController: TVendaItensController;

    procedure CarregarVendas(ACodVenda: Integer);
    procedure Inserir;
    procedure InserirVendas;
    procedure InserirVendaItens;
    procedure Alterar;
    procedure AlterarVendas;
    procedure AlterarVendaItens;
    procedure ExcluirVendas;
    function ValidarDados(ATipoDados: string): Boolean;
    procedure LimpaCamposPedido;
    procedure LimpaCamposItens;
    procedure PreencheCdsVendaItem;
    procedure VerificaBotoes(AOperacao: TOperacao);
    procedure HabilitarBotaoIncluirItens;

  public
    FOperacao: TOperacao;
    pesqVenda: Boolean;
    codigoVenda: Integer;
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

  end;

var
  FrmCadVenda: TFrmCadVenda;
  totVenda, totVendaAnt: Double;
  idItem: Integer;
  alterouGrid: Boolean;

implementation

{$R *.dfm}

{ TFrmCadVenda }

constructor TFrmCadVenda.Create(AOwner: TComponent);
begin
  inherited;
  TransacaoVendas := TFDTransaction.Create(nil);
  TblProdutos := TFDQuery.Create(nil);
  TblClientes := TFDQuery.Create(nil);
  TblVendas := TFDQuery.Create(nil);
  TblVendaItens := TFDQuery.Create(nil);
  DsProdutos := TDataSource.Create(nil);
  DsClientes := TDataSource.Create(nil);
  DsVendas := TDataSource.Create(nil);
  QryVendas := TFDQuery.Create(nil);
  QryTemp := TFDQuery.Create(nil);
end;

destructor TFrmCadVenda.Destroy;
begin
  TransacaoVendas.Free;
  TblProdutos.Free;
  TblClientes.Free;
  TblVendas.Free;
  TblVendaItens.Free;
  DsProdutos.Free;
  DsClientes.Free;
  DsVendas.Free;
  QryVendas.Free;
  QryTemp.Free;
  inherited;
end;

procedure TFrmCadVenda.FormCreate(Sender: TObject);
var sCampo: string;
begin
  inherited;
  if TConexao.GetInstance.Connection.TestarConexao then
  begin
    // Define transação para vendas
    TConexao.GetInstance.Connection.InciarTransacao;
    TransacaoVendas := TConexao.GetInstance.Connection.CriarTransaction;
    //TransacaoVendaItens := TConexao.GetInstance.Connection.CriarTransaction;

    // Cria Tabelas/Querys
    TblProdutos := TConexao.GetInstance.Connection.CriarQuery;
    TblClientes := TConexao.GetInstance.Connection.CriarQuery;
    TblVendas := TConexao.GetInstance.Connection.CriarQuery;
    TblVendaItens := TConexao.GetInstance.Connection.CriarQuery;
    QryVendas := TConexao.GetInstance.Connection.CriarQuery;
    QryVendaItens := TConexao.GetInstance.Connection.CriarQuery;
    QryTemp := TConexao.GetInstance.Connection.CriarQuery;

    QryVendas.Transaction := TransacaoVendas;
    QryVendaItens.Transaction := TransacaoVendas;

    // Cria DataSource
    DsClientes := TConexao.GetInstance.Connection.CriarDataSource;
    DsVendas := TConexao.GetInstance.Connection.CriarDataSource;
    DsProdutos := TConexao.GetInstance.Connection.CriarDataSource;

    // Atribui DataSet às tabelas
    DsVendas.DataSet := TblVendas;
    DsClientes.DataSet := TblClientes;
    DsProdutos.DataSet := TblProdutos;

    //Instancias Classes
    FProduto := TProduto.Create;
    ProdutoController := TProdutoController.Create;
    FCliente := TCliente.Create;
    ClienteController := TClienteController.Create;
    FVenda := TVenda.Create;
    VendaController := TVendaController.Create;
    FVendaItens := TVendaItens.Create;
    VendaItensController := TVendaItensController.Create;

    // Variáveis locais
    sCampo := 'vda.dta_venda';
    totVenda := 0;
    pesqVenda := False;
    SetLength(ValoresOriginais, 4);
    FOperacao := opInicio;
    MTblVendaItem.CreateDataSet;

    // Define configuração DbLookupComboBox
    LcbxNomeCliente.KeyField := 'cod_cliente';
    LcbxNomeCliente.ListField := 'des_nomecliente';
    LcbxNomeCliente.ListSource := DsClientes;

    LCbxProdutos.KeyField := 'cod_produto';
    LCbxProdutos.ListField := 'des_descricao';
    LCbxProdutos.ListSource := DsProdutos;
  end
  else
  begin
    ShowMessage('Não foi possível conectar ao banco de dados!');
    Close;
  end;
end;

procedure TFrmCadVenda.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  inherited;
  if Key = VK_RETURN then
    perform(WM_NEXTDLGCTL,0,0)
end;

procedure TFrmCadVenda.CarregarVendas(ACodVenda: Integer);
begin

end;

procedure TFrmCadVenda.Inserir;
begin

end;

procedure TFrmCadVenda.InserirVendas;
begin

end;

procedure TFrmCadVenda.InserirVendaItens;
begin

end;

procedure TFrmCadVenda.Alterar;
begin

end;

procedure TFrmCadVenda.AlterarVendas;
begin

end;

procedure TFrmCadVenda.BtnPesquisarClick(Sender: TObject);
var LCodvenda: Integer;
begin
  inherited;
  pesqVenda := False;

  if TryStrToInt(EdtCodVenda.Text, LCodvenda) then
    LCodvenda := StrToInt(EdtCodVenda.Text)
  else
    LCodvenda := 0;

  if EdtCodVenda.Text = EmptyStr then // Pesquisa através da janela de pesquisa.
  begin
    if not Assigned(FrmPesquisaVendas) then
      FrmPesquisaVendas := TFrmPesquisaVendas.Create(Self);

    FrmPesquisaVendas.ShowModal;
    FrmPesquisaVendas.Free;
    FrmPesquisaVendas := nil;

    if pesqVenda then
    begin
      CarregarVendas(0);
      ValoresOriginais[0] := EdtCodVenda.Text;
      ValoresOriginais[1] := EdtDataVenda.Text;
      ValoresOriginais[2] := EdtCodCliente.Text;
      ValoresOriginais[3] := EdtTotalVenda.Text;
      //EdtCodClienteExit(Sender);

      if FOperacao = opEditar then
        PnlAlterarClick(Sender);

      VerificaBotoes(FOperacao);
    end;
  end;

  if LCodvenda > 0 then  // Pesquisa informando o codigo da venda.
  begin
    CarregarVendas(LCodvenda);
    //EdtCodClienteExit(Sender);
    FOperacao := opNavegar;
    VerificaBotoes(FOperacao);
  end;

end;

procedure TFrmCadVenda.AlterarVendaItens;
begin

end;

procedure TFrmCadVenda.ExcluirVendas;
begin

end;



procedure TFrmCadVenda.HabilitarBotaoIncluirItens;
begin

end;

procedure TFrmCadVenda.LimpaCamposPedido;
begin

end;

procedure TFrmCadVenda.LimpaCamposItens;
begin

end;

procedure TFrmCadVenda.PnlAlterarClick(Sender: TObject);
begin
  inherited;
  //
end;

procedure TFrmCadVenda.PreencheCdsVendaItem;
begin

end;

function TFrmCadVenda.ValidarDados(ATipoDados: string): Boolean;
begin

end;

procedure TFrmCadVenda.VerificaBotoes(AOperacao: TOperacao);
begin

end;

end.
