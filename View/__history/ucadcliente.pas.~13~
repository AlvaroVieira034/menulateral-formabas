unit ucadcliente;

interface

{$REGION 'Uses'}

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, ucadastropadrao, Vcl.StdCtrls,
  Vcl.Buttons, Vcl.ExtCtrls, Data.DB, Vcl.Grids, Vcl.DBGrids, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error,
  FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.Phys.MSSQL, FireDAC.Phys.MSSQLDef, FireDAC.VCLUI.Wait, FireDAC.Stan.Param,
  FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  conexao.model, cliente.model, cliente.controller, System.UITypes;

{$ENDREGION}

type
  TFrmCadCliente = class(TFrmCadastroPadrao)

{$REGION 'Uses'}
    Label3: TLabel;
    Label1: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    EdtCep: TEdit;
    EdtEndereco: TEdit;
    EdtComplemento: TEdit;
    EdtBairro: TEdit;
    EdtCidade: TEdit;
    EdtUF: TEdit;
    EdtCodigoCliente: TEdit;
    Label8: TLabel;
    EdtCpfCnpj: TEdit;
    Label9: TLabel;
    EdtNome: TEdit;
    Label10: TLabel;
    EdtDataNascimento: TEdit;
    Label11: TLabel;
    BtnPesquisarCep: TSpeedButton;
    PnlPesquisar: TPanel;
    Label12: TLabel;
    BtnPesquisar: TSpeedButton;
    EdtPesquisar: TEdit;
    CbxFiltro: TComboBox;
    DbGridClientes: TDBGrid;
    procedure FormCreate(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure FormShow(Sender: TObject);

{$ENDREGION}

  private
    TblClientes: TFDQuery;
    QryClientes: TFDQuery;
    QryTemp: TFDQuery;
    DsClientes: TDataSource;
    TransacaoClientes: TFDTransaction;
    FCliente: TCliente;
    ClienteController: TClienteController;

    procedure CriarTabelas;
    procedure CriarCamposTabelas;
    procedure PreencherGrid;
    procedure CarregarCampos;
    procedure Inserir;
    procedure Alterar;
    procedure Excluir;
    function ValidarDados: Boolean;
    procedure GravarDados;
    procedure LimpaCampos();
    procedure VerificaBotoes(AOperacao: TOperacao);
    procedure MostrarMensagemErro(AErro: TCampoInvalido);

  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

  end;

var
  FrmCadCliente: TFrmCadCliente;

implementation

{$R *.dfm}

{ TFrmCadCliente }


constructor TFrmCadCliente.Create(AOwner: TComponent);
begin
  inherited;
  TransacaoClientes := TFDTransaction.Create(nil);
  DsClientes := TDataSource.Create(nil);
  TblClientes := TFDQuery.Create(nil);
  QryClientes := TFDQuery.Create(nil);
  QryTemp := TFDQuery.Create(nil);
end;

destructor TFrmCadCliente.Destroy;
begin
  TransacaoClientes.Free;
  DsClientes := TDataSource.Create(nil);
  TblClientes := TFDQuery.Create(nil);
  QryClientes := TFDQuery.Create(nil);
  QryTemp := TFDQuery.Create(nil);
  inherited;
end;

procedure TFrmCadCliente.FormCreate(Sender: TObject);
begin
  inherited;
  if TConexao.GetInstance.Connection.TestarConexao then
  begin
    TConexao.GetInstance.Connection.InciarTransacao;
    CriarTabelas();
    CriarCamposTabelas();
    FCliente := TCliente.Create;
    ClienteController := TClienteController.Create;
    FOperacao := opInicio;
    SetLength(ValoresOriginais, 10);
  end
  else
  begin
    ShowMessage('Não foi possível conectar ao banco de dados!');
    Close;
  end;
end;

procedure TFrmCadCliente.FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  inherited;
   if Key = VK_RETURN then
    perform(WM_NEXTDLGCTL,0,0)
end;

procedure TFrmCadCliente.FormShow(Sender: TObject);
begin
  inherited;
  PreencherGrid();
  VerificaBotoes(FOperacao);
  if EdtPesquisar.CanFocus then
    EdtPesquisar.SetFocus;
end;

procedure TFrmCadCliente.CriarTabelas;
begin
  TransacaoClientes := TConexao.GetInstance.Connection.CriarTransaction;
  TblClientes := TConexao.GetInstance.Connection.CriarQuery;
  QryClientes := TConexao.GetInstance.Connection.CriarQuery;
  QryTemp := TConexao.GetInstance.Connection.CriarQuery;
  QryClientes.Transaction := TransacaoClientes;
  DsClientes := TConexao.GetInstance.Connection.CriarDataSource;
  DsClientes.DataSet := TblClientes;
  DBGridClientes.DataSource := DsClientes;
end;

procedure TFrmCadCliente.CriarCamposTabelas;
var StringField: TStringField;
    IntegerField: TIntegerField;
    DateField: TDateField;
begin
  // Criando o campo COD_PRODUTO
  IntegerField := TIntegerField.Create(TblClientes);
  IntegerField.FieldName := 'COD_CLIENTE';
  IntegerField.DataSet := TblClientes;
  IntegerField.Name := 'TblProdutosCOD_CLIENTE';

   // Criando o campo DES_CPFCNPJ
  StringField := TStringField.Create(TblClientes);
  StringField.FieldName := 'DES_CPFCNPJ';
  StringField.Size := 18;
  StringField.DataSet := TblClientes;
  StringField.Name := 'TblProdutosDES_CPFCNPJ';

  // Criando o campo DES_NOMECLIENTE
  StringField := TStringField.Create(TblClientes);
  StringField.FieldName := 'DES_NOMECLIENTE';
  StringField.Size := 100;
  StringField.DataSet := TblClientes;
  StringField.Name := 'TblProdutosDES_NOMECLIENTE';

  // Criando o campo DTA_NASCIMENTO
  DateField := TDateField.Create(TblClientes);
  DateField.FieldName := 'DTA_NASCIMENTO';
  DateField.DataSet := TblClientes;
  DateField.Name := 'TblProdutosDTA_NASCIMENTO';

  // Criando o campo DES_CEP
  StringField := TStringField.Create(TblClientes);
  StringField.FieldName := 'DES_CEP';
  StringField.Size := 10;
  StringField.DataSet := TblClientes;
  StringField.Name := 'TblProdutosDES_CEP';

  // Criando o campo DES_ENDERECO
  StringField := TStringField.Create(TblClientes);
  StringField.FieldName := 'DES_ENDERECO';
  StringField.Size := 100;
  StringField.DataSet := TblClientes;
  StringField.Name := 'TblProdutosDES_ENDERECO';

  // Criando o campo DES_COMPLEMENTO
  StringField := TStringField.Create(TblClientes);
  StringField.FieldName := 'DES_COMPLEMENTO';
  StringField.Size := 50;
  StringField.DataSet := TblClientes;
  StringField.Name := 'TblProdutosDES_COMPLEMENTO';

  // Criando o campo DES_BAIRRO
  StringField := TStringField.Create(TblClientes);
  StringField.FieldName := 'DES_BAIRRO';
  StringField.Size := 50;
  StringField.DataSet := TblClientes;
  StringField.Name := 'TblProdutosDES_BAIRRO';

  // Criando o campo DES_CIDADE
  StringField := TStringField.Create(TblClientes);
  StringField.FieldName := 'DES_CIDADE';
  StringField.Size := 100;
  StringField.DataSet := TblClientes;
  StringField.Name := 'TblProdutosDES_CIDADE';

  // Criando o campo DES_UF
  StringField := TStringField.Create(TblClientes);
  StringField.FieldName := 'DES_UF';
  StringField.Size := 2;
  StringField.DataSet := TblClientes;
  StringField.Name := 'TblProdutosDES_UF';

end;

procedure TFrmCadCliente.PreencherGrid;
begin
  ClienteController.PreencherGrid(TblClientes, Trim(EdtPesquisar.Text) + '%', CbxFiltro.Text);
  GrbGrid.Caption:= ' Clientes cadastrados: ' + InttoStr(DsClientes.DataSet.RecordCount) + ' ';
end;

procedure TFrmCadCliente.CarregarCampos;
begin

end;

procedure TFrmCadCliente.Inserir;
begin

end;

procedure TFrmCadCliente.Alterar;
begin

end;

procedure TFrmCadCliente.Excluir;
begin

end;


function TFrmCadCliente.ValidarDados: Boolean;
begin

end;

procedure TFrmCadCliente.GravarDados;
begin

end;

procedure TFrmCadCliente.LimpaCampos;
begin

end;

procedure TFrmCadCliente.VerificaBotoes(AOperacao: TOperacao);
begin

end;

procedure TFrmCadCliente.MostrarMensagemErro(AErro: TCampoInvalido);
begin

end;

end.
