unit ucadcliente;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, ucadastropadrao, Vcl.StdCtrls,
  Vcl.Buttons, Vcl.ExtCtrls, Data.DB, Vcl.Grids, Vcl.DBGrids;

type
  TFrmCadCliente = class(TFrmCadastroPadrao)
    Label3: TLabel;
    Label1: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    EdtCep: TEdit;
    EdtEndereco: TEdit;
    EdtComplemento: TEdit;
    EdtBairro: TEdit;
    EdtCidade: TEdit;
    EdtUF: TEdit;
    EdtCodigoCliente: TEdit;
    Label8: TLabel;
    EdtCpfCnpj: TEdit;
    Label9: TLabel;
    EdtNome: TEdit;
    Label10: TLabel;
    EdtDataNascimento: TEdit;
    Label11: TLabel;
    Label12: TLabel;
    BtnPesquisar: TSpeedButton;
    EdtPesquisar: TEdit;
    CbxFiltro: TComboBox;
    BtnPesquisarCep: TSpeedButton;
    DBGrid1: TDBGrid;
    procedure FormCreate(Sender: TObject);

  private
    procedure EditEnter(Sender: TObject);
    procedure EditExit(Sender: TObject);
    procedure ApplyEditFocusEvents;
  public
    { Public declarations }
  end;

var
  FrmCadCliente: TFrmCadCliente;

implementation

{$R *.dfm}

procedure TFrmCadCliente.ApplyEditFocusEvents;
var i: Integer;
begin
  // Itera por todos os componentes do formulário
  for i := 0 to Self.ComponentCount - 1 do
  begin
    // Verifica se o componente é um TEdit
    if (Components[i] is TEdit) then
    begin
      // Associa dinamicamente os eventos OnEnter e OnExit
      (Components[i] as TEdit).OnEnter := EditEnter;
      (Components[i] as TEdit).OnExit := EditExit;
    end;
  end;
end;

procedure TFrmCadCliente.EditEnter(Sender: TObject);
begin
  (Sender as TEdit).Color := $00D2FFFF;
end;

procedure TFrmCadCliente.EditExit(Sender: TObject);
begin
  (Sender as TEdit).Color := clWindow;
end;

procedure TFrmCadCliente.FormCreate(Sender: TObject);
begin
  inherited;
  ApplyEditFocusEvents;  // Aplica eventos para todos os TEdits
end;

end.
